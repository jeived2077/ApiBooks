"""Добавление таблиц понравившихся

Revision ID: a3cfd7d42eb0
Revises: bf1a006ee423
Create Date: 2025-10-12 14:48:03.005675

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'a3cfd7d42eb0'
down_revision: Union[str, Sequence[str], None] = 'bf1a006ee423'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('favorite_user_author_table',
    sa.Column('id_favorite', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('id_author', sa.Integer(), nullable=False),
    sa.Column('id_user', sa.Integer(), nullable=False),
    sa.Column('datetime_favorite', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['id_author'], ['author_table.id_author'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['id_user'], ['user_table.id_user'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id_favorite')
    )
    op.create_table('favorite_user_book',
    sa.Column('favorite_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('Id_user', sa.Integer(), nullable=False),
    sa.Column('Id_book', sa.Integer(), nullable=False),
    sa.Column('datetime_favorite', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['Id_book'], ['books_Table.book_id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['Id_user'], ['user_table.id_user'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('favorite_id')
    )
    op.add_column('author_table', sa.Column('id_author', sa.Integer(), autoincrement=True, nullable=False))
    op.add_column('author_table', sa.Column('name', sa.String(), nullable=False))
    op.add_column('author_table', sa.Column('family', sa.String(), nullable=False))
    op.add_column('author_table', sa.Column('photo', sa.LargeBinary(), nullable=False))
    op.add_column('author_table', sa.Column('information', sa.String(), nullable=False))
    op.add_column('author_table', sa.Column('date_author', sa.Date(), nullable=False))
    op.drop_column('author_table', 'IdAuthor')
    op.drop_constraint(op.f('book_author_id_author_fkey'), 'book_author', type_='foreignkey')
    op.drop_constraint(op.f('book_author_id_book_fkey'), 'book_author', type_='foreignkey')
    op.create_foreign_key(None, 'book_author', 'author_table', ['id_author'], ['id_author'], ondelete='CASCADE')
    op.create_foreign_key(None, 'book_author', 'books_Table', ['id_book'], ['book_id'], ondelete='CASCADE')
    op.add_column('books_Table', sa.Column('book_id', sa.Integer(), autoincrement=True, nullable=False))
    op.add_column('books_Table', sa.Column('book_name', sa.String(), nullable=False))
    op.add_column('books_Table', sa.Column('year_Create', sa.Date(), nullable=False))
    op.add_column('books_Table', sa.Column('genre_Id', sa.Integer(), nullable=False))
    op.add_column('books_Table', sa.Column('saled_books', sa.Integer(), nullable=False))
    op.add_column('books_Table', sa.Column('image_books', sa.LargeBinary(), nullable=False))
    op.add_column('books_Table', sa.Column('description', sa.String(), nullable=False))
    op.drop_constraint(op.f('books_Table_GenreId_fkey'), 'books_Table', type_='foreignkey')
    op.create_foreign_key(None, 'books_Table', 'genre_table', ['genre_Id'], ['genre_id'], ondelete='CASCADE')
    op.drop_column('books_Table', 'BookName')
    op.drop_column('books_Table', 'GenreId')
    op.drop_column('books_Table', 'BookId')
    op.drop_column('books_Table', 'SaledBooks')
    op.drop_column('books_Table', 'ImageBooks')
    op.drop_column('books_Table', 'YearCreate')
    op.add_column('genre_table', sa.Column('genre_id', sa.Integer(), autoincrement=True, nullable=False))
    op.add_column('genre_table', sa.Column('genre_name', sa.String(), nullable=False))
    op.drop_constraint(op.f('genre_table_GenreName_key'), 'genre_table', type_='unique')
    op.create_unique_constraint(None, 'genre_table', ['genre_name'])
    op.drop_column('genre_table', 'GenreId')
    op.drop_column('genre_table', 'GenreName')
    op.alter_column('user_table', 'login_user',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('user_table', 'password_hashed',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('user_table', 'email',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('user_table', 'role',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.create_unique_constraint(None, 'user_table', ['password_hashed'])
    op.drop_column('user_table', 'salt')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('user_table', sa.Column('salt', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'user_table', type_='unique')
    op.alter_column('user_table', 'role',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('user_table', 'email',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('user_table', 'password_hashed',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('user_table', 'login_user',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.add_column('genre_table', sa.Column('GenreName', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('genre_table', sa.Column('GenreId', sa.INTEGER(), server_default=sa.text('nextval(\'"genre_table_GenreId_seq"\'::regclass)'), autoincrement=True, nullable=False))
    op.drop_constraint(None, 'genre_table', type_='unique')
    op.create_unique_constraint(op.f('genre_table_GenreName_key'), 'genre_table', ['GenreName'], postgresql_nulls_not_distinct=False)
    op.drop_column('genre_table', 'genre_name')
    op.drop_column('genre_table', 'genre_id')
    op.add_column('books_Table', sa.Column('YearCreate', sa.DATE(), autoincrement=False, nullable=True))
    op.add_column('books_Table', sa.Column('ImageBooks', postgresql.BYTEA(), autoincrement=False, nullable=True))
    op.add_column('books_Table', sa.Column('SaledBooks', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('books_Table', sa.Column('BookId', sa.INTEGER(), server_default=sa.text('nextval(\'"books_Table_BookId_seq"\'::regclass)'), autoincrement=True, nullable=False))
    op.add_column('books_Table', sa.Column('GenreId', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('books_Table', sa.Column('BookName', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'books_Table', type_='foreignkey')
    op.create_foreign_key(op.f('books_Table_GenreId_fkey'), 'books_Table', 'genre_table', ['GenreId'], ['GenreId'], ondelete='CASCADE')
    op.drop_column('books_Table', 'description')
    op.drop_column('books_Table', 'image_books')
    op.drop_column('books_Table', 'saled_books')
    op.drop_column('books_Table', 'genre_Id')
    op.drop_column('books_Table', 'year_Create')
    op.drop_column('books_Table', 'book_name')
    op.drop_column('books_Table', 'book_id')
    op.drop_constraint(None, 'book_author', type_='foreignkey')
    op.drop_constraint(None, 'book_author', type_='foreignkey')
    op.create_foreign_key(op.f('book_author_id_book_fkey'), 'book_author', 'books_Table', ['id_book'], ['BookId'], ondelete='CASCADE')
    op.create_foreign_key(op.f('book_author_id_author_fkey'), 'book_author', 'author_table', ['id_author'], ['IdAuthor'], ondelete='CASCADE')
    op.add_column('author_table', sa.Column('IdAuthor', sa.INTEGER(), server_default=sa.text('nextval(\'"author_table_IdAuthor_seq"\'::regclass)'), autoincrement=True, nullable=False))
    op.drop_column('author_table', 'date_author')
    op.drop_column('author_table', 'information')
    op.drop_column('author_table', 'photo')
    op.drop_column('author_table', 'family')
    op.drop_column('author_table', 'name')
    op.drop_column('author_table', 'id_author')
    op.drop_table('favorite_user_book')
    op.drop_table('favorite_user_author_table')
    # ### end Alembic commands ###
